# プラグイン {{{
[[plugins]]
repo        = 'Shougo/dein.vim'
lazy        = 0

# }}}
# ライブラリ {{{

[[plugins]]
repo        = 'kana/vim-submode'
lazy        = 1
on_map      = ['gh', 'gw', ',w']
hook_add    = '''
function! YOI_submode_snap(value, scale)
  return a:value / a:scale * a:scale
endfunction

function! YOI_submode_resize_appwin(x, y)
  let scale = get(g:, 'yoi_resize_appwin_size', 8)

  if a:x != 0
    let &columns = YOI_submode_snap(&columns, scale) + a:x * scale
  endif

  if a:y != 0
    let &lines   = YOI_submode_snap(&lines,   scale) + a:y * scale
  endif
endfunction

function! YOI_submode_move_appwin(x, y)
  let scale = get(g:, 'yoi_move_appwin_size', 64)
  let win_x = getwinposx()
  let win_y = getwinposy()

  if a:x == 0
    let x = win_x
  else
    let x = win_x + a:x * scale

    if win_x != YOI_submode_snap(win_x, scale)
      let x = YOI_submode_snap(x, scale)
    endif
  endif

  if a:y == 0
    let y = win_y
  else
    let y = win_y + a:y * scale

    if win_y != YOI_submode_snap(win_y, scale)
      let y = YOI_submode_snap(y, scale)
    endif
  endif

  execute 'winpos' x y
endfunction
'''
hook_source = '''
let g:submode_timeout          = 0
let g:submode_keep_leaving_key = 1

call submode#enter_with('git_hunk', 'n', 's', 'ghj', ':<C-u>GitGutterNextHunk<CR>zvzz')
call submode#enter_with('git_hunk', 'n', 's', 'ghk', ':<C-u>GitGutterPrevHunk<CR>zvzz')
call submode#map(       'git_hunk', 'n', 's', 'j',   ':<C-u>GitGutterNextHunk<CR>zvzz')
call submode#map(       'git_hunk', 'n', 's', 'k',   ':<C-u>GitGutterPrevHunk<CR>zvzz')

call submode#enter_with('winsize', 'n', 's', 'gwh', '8<C-w>>')
call submode#enter_with('winsize', 'n', 's', 'gwl', '8<C-w><')
call submode#enter_with('winsize', 'n', 's', 'gwj', '4<C-w>-')
call submode#enter_with('winsize', 'n', 's', 'gwk', '4<C-w>+')
call submode#map(       'winsize', 'n', 's', 'h',   '8<C-w>>')
call submode#map(       'winsize', 'n', 's', 'l',   '8<C-w><')
call submode#map(       'winsize', 'n', 's', 'j',   '4<C-w>-')
call submode#map(       'winsize', 'n', 's', 'k',   '4<C-w>+')

let call_resize_appwin = ':<C-u>call YOI_submode_resize_appwin'
let call_move_appwin   = ':<C-u>call YOI_submode_move_appwin'

call submode#enter_with('appwinsize', 'n', 's', ',wH', call_resize_appwin . '(-1, 0)<CR>')
call submode#enter_with('appwinsize', 'n', 's', ',wL', call_resize_appwin . '(+1, 0)<CR>')
call submode#enter_with('appwinsize', 'n', 's', ',wJ', call_resize_appwin . '(0, +1)<CR>')
call submode#enter_with('appwinsize', 'n', 's', ',wK', call_resize_appwin . '(0, -1)<CR>')
call submode#map(       'appwinsize', 'n', 's', 'H',   call_resize_appwin . '(-1, 0)<CR>')
call submode#map(       'appwinsize', 'n', 's', 'L',   call_resize_appwin . '(+1, 0)<CR>')
call submode#map(       'appwinsize', 'n', 's', 'J',   call_resize_appwin . '(0, +1)<CR>')
call submode#map(       'appwinsize', 'n', 's', 'K',   call_resize_appwin . '(0, -1)<CR>')
call submode#map(       'appwinsize', 'n', 's', 'h',   call_resize_appwin . '(-1, 0)<CR>')
call submode#map(       'appwinsize', 'n', 's', 'l',   call_resize_appwin . '(+1, 0)<CR>')
call submode#map(       'appwinsize', 'n', 's', 'j',   call_resize_appwin . '(0, +1)<CR>')
call submode#map(       'appwinsize', 'n', 's', 'k',   call_resize_appwin . '(0, -1)<CR>')

call submode#enter_with('appwinpos',  'n', 's', ',wh', call_move_appwin   . '(-1, 0)<CR>')
call submode#enter_with('appwinpos',  'n', 's', ',wl', call_move_appwin   . '(+1, 0)<CR>')
call submode#enter_with('appwinpos',  'n', 's', ',wj', call_move_appwin   . '(0, +1)<CR>')
call submode#enter_with('appwinpos',  'n', 's', ',wk', call_move_appwin   . '(0, -1)<CR>')
call submode#map(       'appwinpos',  'n', 's', 'H',   call_move_appwin   . '(-1, 0)<CR>')
call submode#map(       'appwinpos',  'n', 's', 'L',   call_move_appwin   . '(+1, 0)<CR>')
call submode#map(       'appwinpos',  'n', 's', 'J',   call_move_appwin   . '(0, +1)<CR>')
call submode#map(       'appwinpos',  'n', 's', 'K',   call_move_appwin   . '(0, -1)<CR>')
call submode#map(       'appwinpos',  'n', 's', 'h',   call_move_appwin   . '(-1, 0)<CR>')
call submode#map(       'appwinpos',  'n', 's', 'l',   call_move_appwin   . '(+1, 0)<CR>')
call submode#map(       'appwinpos',  'n', 's', 'j',   call_move_appwin   . '(0, +1)<CR>')
call submode#map(       'appwinpos',  'n', 's', 'k',   call_move_appwin   . '(0, -1)<CR>')
'''

# }}}
# 表示 {{{
[[plugins]]
repo        = 'YoshihiroIto/molokai'
lazy        = 0

[[plugins]]
repo        = 'itchyny/lightline.vim'
lazy        = 0
hook_add    = '''
let g:lightline#colorscheme#yoi#palette = {
      \   'inactive': {
      \     'left':     [['#585858', '#262626', 240, 235],
      \                  ['#585858', '#121212', 240, 233]],
      \     'right':    [['#262626', '#606060', 235, 241],
      \                  ['#585858', '#262626', 240, 235],
      \                  ['#585858', '#121212', 240, 233]]
      \   },
      \   'insert':   {
      \     'branch':   [['#FFFFFF', '#0087AF', 231,  31]],
      \     'left':     [['#005F5F', '#FFFFFF',  23, 231],
      \                  ['#87DFFF', '#005F87', 117,  24]],
      \     'middle':   [['#87DFFF', '#005F87', 117,  24]],
      \     'right':    [['#005F5F', '#87DFFF',  23, 117],
      \                  ['#87DFFF', '#0087AF', 117,  31],
      \                  ['#87DFFF', '#005F87', 117,  24]]
      \   },
      \   'normal':   {
      \     'branch':   [['#FFFFFF', '#585858', 231, 240]],
      \     'error':    [['#BCBCBC', '#FF0000', 250, 196]],
      \     'left':     [['#195E00', '#07AF00',  22,  34],
      \                  ['#8A8A8A', '#303030', 245, 236]],
      \     'middle':   [['#8A8A8A', '#303030', 245, 236]],
      \     'right':    [['#606060', '#D0D0D0', 241, 252],
      \                  ['#BCBCBC', '#585858', 250, 240],
      \                  ['#9E9E9E', '#303030', 247, 236]],
      \     'warning':  [['#262626', '#B58900', 235, 136]]
      \   },
      \   'replace':  {
      \     'left':     [['#FFFFFF', '#DF0000', 231, 160],
      \                  ['#FFFFFF', '#585858', 231, 240]],
      \     'middle':   [['#8A8A8A', '#303030', 245, 236]],
      \     'right':    [['#606060', '#D0D0D0', 241, 252],
      \                  ['#BCBCBC', '#585858', 250, 240],
      \                  ['#9E9E9E', '#303030', 247, 236]]
      \   },
      \   'tabline':  {
      \     'left':     [['#BCBCBC', '#585858', 250, 240]],
      \     'middle':   [['#303030', '#9E9E9E', 236, 247]],
      \     'right':    [['#BCBCBC', '#4E4E4E', 250, 239]],
      \     'tabsel':   [['#BCBCBC', '#262626', 250, 235]]
      \   },
      \   'visual':   {
      \     'branch':   [['#FFFFFF', '#AF0053', 231, 125]],
      \     'left':     [['#AB2362', '#FFFFFF', 125, 231],
      \                  ['#FF84BA', '#870036', 211,  89]],
      \     'middle':   [['#FF84BA', '#870036', 211,  89]],
      \     'right':    [['#75003D', '#FF87BB',  89, 211],
      \                  ['#FE86BB', '#AF0053', 211, 125],
      \                  ['#FF84BA', '#870036', 211,  89]]
      \   }
      \ }

let g:lightline = {
      \   'colorscheme': 'yoi',
      \   'active': {
      \     'left': [
      \       ['mode',   'paste'],
      \       ['branch', 'gitgutter', 'filename', 'anzu', 'submode']
      \     ],
      \     'right': [
      \       ['syntastic', 'lineinfo'],
      \       ['percent']
      \     ]
      \   },
      \   'component': {'percent': '⭡%3p%%'},
      \   'component_function': {
      \     'fileformat':   'YOI_lightline_fileformat',
      \     'filetype':     'YOI_lightline_filetype',
      \     'fileencoding': 'YOI_lightline_fileencoding',
      \     'modified':     'YOI_lightline_modified',
      \     'readonly':     'YOI_lightline_readonly',
      \     'filename':     'YOI_lightline_filename',
      \     'mode':         'YOI_lightline_mode',
      \     'lineinfo':     'YOI_lightline_lineinfo',
      \     'anzu':         'anzu#search_status',
      \     'submode':      'submode#current'
      \   },
      \   'component_expand': {
      \     'syntastic':    'SyntasticStatuslineFlag',
      \     'branch':       'YOI_lightline_current_branch',
      \     'gitgutter':    'YOI_lightline_git_summary'
      \   },
      \   'component_type': {
      \     'syntastic':    'error',
      \     'branch':       'branch',
      \     'gitgutter':    'branch'
      \   },
      \   'separator': {   'left': '⮀', 'right': '⮂'},
      \   'subseparator': {'left': '⮁', 'right': '⮃'},
      \   'tabline': {
      \     'left':  [['tabs']],
      \     'right': [['filetype', 'fileformat', 'fileencoding']]
      \   },
      \   'tabline_separator': {   'left': '⮀', 'right': '⮂'},
      \   'tabline_subseparator': {'left': '⮁', 'right': '⮃'},
      \   'mode_map': {
      \     'n':      'N',
      \     'i':      'I',
      \     'R':      'R',
      \     'v':      'V',
      \     'V':      'VL',
      \     'c':      'C',
      \     "\<C-v>": 'VB',
      \     's':      'S',
      \     'S':      'SL',
      \     "\<C-s>": 'SB',
      \     't':      'T',
      \     '?':      ' '
      \   }
      \ }

function! YOI_lightline_mode()
  return  &filetype ==# 'quickrun' ? 'Quickrun' :
        \ &filetype ==# 'agit'     ? 'Agit'     :
        \ winwidth(0) > 50 ? lightline#mode() : ''
endfunction

function! YOI_lightline_modified()
  if s:is_lightline_no_disp_group()
    return ''
  endif

  return &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! YOI_lightline_readonly()
  if s:is_lightline_no_disp_filetype()
    return ''
  endif

  return &readonly ? '⭤' : ''
endfunction

function! YOI_lightline_filename()
  try
    return (empty(YOI_lightline_readonly()) ? '' : YOI_lightline_readonly() . ' ') .
          \ (&filetype ==# 'quickrun' ? ''      :
          \  empty(expand('%:t')) ? '[No Name]' : expand('%:t')) .
          \ (empty(YOI_lightline_modified()) ? '' : ' ' . YOI_lightline_modified())
  catch
    return ''
  endtry
endfunction

function! YOI_lightline_current_branch()
  if s:is_lightline_no_disp_filetype()
    return ''
  endif

  if !YOI_is_in_git_branch()
    return ''
  endif

  try
    let branch = fugitive#head()
    return empty(branch) ? '' : '⭠ ' . branch
  catch
    return ''
  endtry

  return ''
endfunction

function! YOI_lightline_fileformat()
  if s:is_lightline_no_disp_group()
    return ''
  endif

  return &fileformat
endfunction

function! YOI_lightline_filetype()
  if s:is_lightline_no_disp_group()
    return ''
  endif

  return empty(&filetype) ? 'no filetype' : &filetype
endfunction

function! YOI_lightline_fileencoding()
  if s:is_lightline_no_disp_group()
    return ''
  endif

  return empty(&fileencoding) ? &encoding : &fileencoding
endfunction

function! YOI_lightline_git_summary()
  if s:is_lightline_no_disp_group()
    return ''
  endif

  if !YOI_is_in_git_branch()
    return ''
  endif

  try
    let summary = GitGutterGetHunkSummary()
    return printf('%s%d %s%d %s%d',
          \ g:gitgutter_sign_added,    summary[0],
          \ g:gitgutter_sign_modified, summary[1],
          \ g:gitgutter_sign_removed,  summary[2])
  catch
    return ''
  endtry
endfunction

function! YOI_lightline_lineinfo()
  if winwidth(0) <= 50
    return ''
  endif

  return printf('%4d/%d : %-3d', line('.'), line('$'), col('.'))
endfunction

function! s:is_lightline_no_disp_filetype()
  return &filetype =~# 'quickrun\|agit'
endfunction

function! s:is_lightline_no_disp_group()
  if winwidth(0) <= 50
    return 1
  endif

  if s:is_lightline_no_disp_filetype()
    return 1
  endif

  return 0
endfunction

Autocmd CursorHold,CursorHoldI * call lightline#update()
'''

[[plugins]]
repo        = 'itchyny/vim-parenmatch'
lazy        = 1
on_path     = '.*'
hook_source = '''
let g:parenmatch_highlight = 0
highlight ParenMatch guifg=#000000 guibg=#FD971F gui=bold
'''

[[plugins]]
repo        = 'Konfekt/FastFold'
lazy        = 1
on_path     = '.*'

# }}}
# 検索 {{{
[[plugins]]
repo        = 'ctrlpvim/ctrlp.vim'
lazy        = 0
on_cmd      = ['CtrlPMRUFiles']
hook_add    = '''
nnoremap <silent> <Space>m   :<C-u>CtrlPMRUFiles<CR>

let g:ctrlp_match_window = 'bottom,order:ttb,min:32,max:32'
let g:ctrlp_regexp = 1

let g:ctrlp_prompt_mappings = {
  \ 'PrtBS()':              ['<bs>', '<c-]>', '<c-h>'],
  \ 'PrtDelete()':          ['<del>'],
  \ 'PrtDeleteWord()':      ['<c-w>'],
  \ 'PrtClear()':           ['<c-u>'],
  \ 'PrtSelectMove("j")':   ['<c-n>'],
  \ 'PrtSelectMove("k")':   ['<c-p>'],
  \ 'PrtSelectMove("t")':   ['<Home>', '<kHome>'],
  \ 'PrtSelectMove("b")':   ['<End>', '<kEnd>'],
  \ 'PrtSelectMove("u")':   ['<PageUp>', '<kPageUp>'],
  \ 'PrtSelectMove("d")':   ['<PageDown>', '<kPageDown>'],
  \ 'PrtHistory(-1)':       ['<down>'],
  \ 'PrtHistory(1)':        ['<up>'],
  \ 'AcceptSelection("e")': ['<cr>', '<2-LeftMouse>'],
  \ 'AcceptSelection("h")': ['<c-x>', '<c-cr>', '<c-s>'],
  \ 'AcceptSelection("t")': ['<c-t>'],
  \ 'AcceptSelection("v")': ['<c-v>', '<RightMouse>'],
  \ 'ToggleFocus()':        ['<s-tab>'],
  \ 'ToggleRegex()':        ['<c-r>'],
  \ 'ToggleByFname()':      ['<c-d>'],
  \ 'ToggleType(1)':        ['<c-f>', '<c-up>'],
  \ 'ToggleType(-1)':       ['<c-b>', '<c-down>'],
  \ 'PrtExpandDir()':       ['<tab>'],
  \ 'PrtInsert("c")':       ['<MiddleMouse>', '<insert>'],
  \ 'PrtInsert()':          ['<c-\>'],
  \ 'PrtCurStart()':        ['<c-a>'],
  \ 'PrtCurEnd()':          ['<c-e>'],
  \ 'PrtCurLeft()':         ['<left>', '<c-^>'],
  \ 'PrtCurRight()':        ['<c-l>', '<right>'],
  \ 'PrtClearCache()':      ['<F5>'],
  \ 'PrtDeleteEnt()':       ['<F7>'],
  \ 'CreateNewFile()':      ['<c-y>'],
  \ 'MarkToOpen()':         ['<c-z>'],
  \ 'OpenMulti()':          ['<c-o>'],
  \ 'PrtExit()':            ['<esc>', '<c-c>', '<c-g>', '<c-j>'],
  \ }

let g:ctrlp_status_func = {
  \ 'main': 'Function_Name_1',
  \ 'prog': 'Function_Name_2',
  \ }
function! Function_Name_1(focus, byfname, regex, prev, item, next, marked)
  let g:lightline.ctrlp_prev = a:prev
  let g:lightline.ctrlp_item = a:item
  let g:lightline.ctrlp_next = a:next
  let g:lightline.ctrlp_marked = a:marked
  return lightline#statusline(0)
endfunction
function! Function_Name_2(str)
  return lightline#statusline(0)
endfunction
'''

[[plugins]]
repo        = 'lambdalisue/lista.nvim'
lazy        = 1
depends     = 'vim-rplugin'
hook_add    = '''
  let $PATH = $USERPROFILE . '/AppData/Local/Programs/Python/Python35;' . $PATH

  nnoremap <silent> <Space>l   :<C-u>Lista<CR>
'''
hook_source = '''
  let g:lista#custom_mappings = [
        \ ['<C-j>', '<Esc>'],
        \ ['<C-p>', '<S-Tab>'],
        \ ['<C-n>', '<Tab>'],
        \]
'''

[[plugins]]
repo        = 'lambdalisue/vim-rplugin'
lazy        = 1

[[plugins]]
repo        = 'osyo-manga/vim-anzu'
lazy        = 1
on_map      = '<Plug>'

[[plugins]]
repo        = 'haya14busa/vim-asterisk'
lazy        = 1
on_map      = '<Plug>'

[[plugins]]
repo        = 'k-takata/matchit.vim'
lazy        = 1
on_path     = '.*'
hook_source = '''
silent! execute 'doautocmd Filetype' &filetype
'''

[[plugins]]
repo        = 'haya14busa/is.vim'
lazy        = 1
on_map      = '<Plug>'
hook_add    = '''
nmap n <Plug>(is-nohl)<Plug>(anzu-n-with-echo)
nmap N <Plug>(is-nohl)<Plug>(anzu-N-with-echo)

map *  <Plug>(asterisk-z*)<Plug>(is-nohl-1)
map g* <Plug>(asterisk-gz*)<Plug>(is-nohl-1)
map #  <Plug>(asterisk-z#)<Plug>(is-nohl-1)
map g# <Plug>(asterisk-gz#)<Plug>(is-nohl-1)
'''

[[plugins]]
repo        = 'rhysd/clever-f.vim'
lazy        = 1
on_map      = '<Plug>'
hook_add    = '''
nmap f <Plug>(clever-f-f)
xmap f <Plug>(clever-f-f)
omap f <Plug>(clever-f-f)
nmap F <Plug>(clever-f-F)
xmap F <Plug>(clever-f-F)
omap F <Plug>(clever-f-F)
'''
hook_source = '''
let g:clever_f_not_overwrites_standard_mappings = 1
let g:clever_f_ignore_case                      = 1
let g:clever_f_smart_case                       = 1
let g:clever_f_across_no_line                   = 1
let g:clever_f_use_migemo                       = 0
let g:clever_f_chars_match_any_signs            = ';'
let g:clever_f_mark_char_color                  = 'Clever_f_mark_char'

highlight default Clever_f_mark_char ctermfg=Green ctermbg=NONE cterm=underline
      \                              guifg=Green   guibg=NONE   gui=underline
'''

# }}}
# 補完 {{{
[[plugins]]
repo        = 'Shougo/neocomplete.vim'
lazy        = 1
on_i        = 1
hook_source = '''
let g:neocomplete#enable_at_startup       = 1
let g:neocomplete#enable_ignore_case      = 1
let g:neocomplete#enable_smart_case       = 1
let g:neocomplete#enable_auto_delimiter   = 1
let g:neocomplete#enable_fuzzy_completion = 0
let g:neocomplete#enable_refresh_always   = 1
let g:neocomplete#enable_prefetch         = 1

let g:neocomplete#auto_completion_start_length      = 3
let g:neocomplete#manual_completion_start_length    = 0
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#min_keyword_length                = 3
let g:neocomplete#force_overwrite_completefunc      = 1
let g:neocomplete#skip_auto_completion_time         = '0.2'

let g:neocomplete#sources#dictionary#dictionaries = {
      \   'default': ''
      \ }

" 日本語は収集しない
let g:neocomplete#keyword_patterns = {
      \   '_': '\h\w*'
      \ }

let g:neocomplete#sources#omni#input_patterns = {
      \   'c':           '\%(\.\|->\)\h\w*',
      \   'disable_cpp': '\h\w*\%(\.\|->\)\h\w*\|\h\w*::',
      \   'cs':          '[a-zA-Z0-9.]\{2\}',
      \   'typescript':  '\h\w*\|[^. \t]\.\w*',
      \   'ruby':        '[^. *\t]\.\w*\|\h\w*::'
      \ }

let g:neocomplete#force_omni_input_patterns = {
      \   'c':      '[^.[:digit:] *\t]\%(\.\|->\)\w*',
      \   'disable_cpp':    '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*',
      \   'objc':   '[^.[:digit:] *\t]\%(\.\|->\)\w*',
      \   'objcpp': '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*',
      \   'cs':     '[^.[:digit:] *\t]\%(\.\)\w*\|\h\w*::\w*'
      \ }

let g:neocomplete#delimiter_patterns = {
      \   'c':   ['.', '->'],
      \   'disable_cpp': [' ::', '.'],
      \   'cs':  ['.'],
      \   'vim': ['#', '.']
      \ }

let g:neocomplete#sources#file_include#exts = {
      \   'c':   ['', 'h'],
      \   'cpp': ['', 'h', 'hpp', 'hxx'],
      \   'cs':  ['', 'Designer.cs']
      \ }

call neocomplete#custom#source('file', 'rank', 10)
'''
[[plugins]]
repo        = 'SirVer/ultisnips'
lazy        = 1
depends     = 'neocomplete.vim'
on_ft       = 'snippets'
on_i        = 1
hook_source = '''
let g:UltiSnipsSnippetDirectories  = [g:YOI_dotvim_dir . '/UltiSnips']
let g:UltiSnipsJumpForwardTrigger  = "<Tab>"
let g:UltiSnipsJumpBackwardTrigger = "<S-Tab>"

call neocomplete#custom#source('US', 'rank', 1000)
'''
# }}}
# 編集 {{{
[[plugins]]
repo        = 'tomtom/tcomment_vim'
lazy        = 1
on_func     = 'tcomment'
on_map      = 'gc'
on_cmd      = 'TComment'

[[plugins]]
repo        = 'osyo-manga/vim-over'
lazy        = 1
on_cmd      = 'OverCommandLine'
hook_add    = '''
let g:over_command_line_key_mappings = {"\<C-j>": "\<Esc>"}

nnoremap <silent> <Leader>s  :OverCommandLine<CR>%s/
vnoremap <silent> <Leader>s  :OverCommandLine<CR>s/
nnoremap <silent> <Leader>rs :<C-u>OverCommandLine<CR>%s///g<Left><Left>
vnoremap <silent> <Leader>rs :OverCommandLine<CR>s///g<Left><Left>
'''

[[plugins]]
repo        = 'junegunn/vim-easy-align'
lazy        = 1
on_map      = '<Plug>(EasyAlign)'
hook_add    = '''
nmap <silent> <Leader>a=       v<Plug>(textobj-indent-i)<Plug>(EasyAlign)=
nmap <silent> <Leader>a:       v<Plug>(textobj-indent-i)<Plug>(EasyAlign):
nmap <silent> <Leader>a,       v<Plug>(textobj-indent-i)<Plug>(EasyAlign)*,
nmap <silent> <Leader>a<Space> v<Plug>(textobj-indent-i)<Plug>(EasyAlign)*<Space>
nmap <silent> <Leader>a\|      v<Plug>(textobj-indent-i)<Plug>(EasyAlign)*\|
xmap <silent> <Leader>a=       <Plug>(EasyAlign)=
xmap <silent> <Leader>a:       <Plug>(EasyAlign):
xmap <silent> <Leader>a,       <Plug>(EasyAlign)*,
xmap <silent> <Leader>a<Space> <Plug>(EasyAlign)*<Space>
xmap <silent> <Leader>a\|      <Plug>(EasyAlign)*\|
'''

[[plugins]]
repo        = 'cohama/lexima.vim'
lazy        = 1
on_i        = 1

[[plugins]]
repo        = 'deris/vim-rengbang'
lazy        = 1
on_cmd      = 'RengBang'

# }}}
# ファイル {{{
[[plugins]]
repo        = 'YoshihiroIto/vim-auto-mirroring'
lazy        = 1
on_path     = '.*'
hook_add    = '''
let g:auto_mirroring_dir =  g:YOI_cache_dir . '/mirror'
'''

# }}}
# アプリ {{{
[[plugins]]
repo        = 'YoshihiroIto/vim-icondrag'
lazy        = 1
on_path     = '.*'
hook_source = '''
call icondrag#enable()
'''

[[plugins]]
repo        = 'previm/previm'
lazy        = 1
depends     = 'open-browser.vim'
on_ft       = 'markdown'

[[plugins]]
repo        = 'tyru/open-browser.vim'
lazy        = 1
on_map      = '<Plug>(openbrowser'
hook_add    = '''
let g:openbrowser_no_default_menus = 1
let g:netrw_nogx = 1
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)
'''

[[plugins]]
repo        = 'cocopon/vaffle.vim'
lazy        = 1
on_map      = '<Plug>'
on_path     = '.*'
hook_add    = '''
let g:vaffle_show_hidden_files = 1
noremap <silent> [App]f :<C-u>Vaffle<CR>
'''

[[plugins]]
repo        = 'glidenote/memolist.vim'
lazy        = 1
on_cmd      = ['MemoNew', 'MemoList']
hook_add    = '''
noremap <silent> [App]mn :<C-u>MemoNew<CR>
noremap <silent> [App]ml :execute "CtrlP" g:memolist_path<cr>

let g:memolist_memo_suffix  = 'md'
let g:memolist_path         = g:YOI_dropbox_dir . '/memo'
'''

# }}}
# C++ {{{
[[plugins]]
repo        = 'Mizuchi/STL-Syntax'
lazy        = 1
on_ft       = 'cpp'

[[plugins]]
repo        = 'vim-jp/vim-cpp'
lazy        = 1
on_ft       = 'cpp'

[[plugins]]
repo        = 'rhysd/vim-clang-format'
lazy        = 1
on_cmd      = 'ClangFormat'
hook_source = '''
let g:clang_format#style_options = {
      \   'AccessModifierOffset':                           -4,
      \   'AllowShortIfStatementsOnASingleLine':            'false',
      \   'AlwaysBreakBeforeMultilineStrings':              'false',
      \   'BreakBeforeBraces':                              'Allman',
      \   'BreakConstructorInitializersBeforeComma':        'true',
      \   'ColumnLimit':                                    0,
      \   'ConstructorInitializerAllOnOneLineOrOnePerLine': 'false',
      \   'IndentCaseLabels':                               'true',
      \   'IndentWidth':                                    4,
      \   'UseTab':                                         'Never'
      \ }
'''

# }}}
# Xml {{{
[[plugins]]
repo        = 'YoshihiroIto/vim-closetag'
lazy        = 1
on_func     = 'closetag'
hook_add    = '''
let g:closetag_filenames = '*.{html,xhtml,xml,xaml}'
'''

# }}}
# Git {{{
[[plugins]]
repo        = 'tpope/vim-fugitive'
lazy        = 0
hook_add    = '''
function! YOI_update_fugitive()
  try
    call fugitive#detect(expand('<amatch>:p'))
    call lightline#update()
  catch
  endtry
endfunction

Autocmd FocusGained,FocusLost * call YOI_update_fugitive()
'''

[[plugins]]
repo        = 'airblade/vim-gitgutter'
lazy        = 0
hook_add    = '''
let g:gitgutter_map_keys = 0
let g:gitgutter_grep     = ''
'''

# }}}
# ファイルタイプ {{{
[[plugins]]
repo        = 'itchyny/vim-autoft'
lazy        = 0
hook_add    = '''
let g:autoft_config = [
      \   {'filetype': 'cs',
      \    'pattern': '^\s*using'},
      \   {'filetype': 'cpp',
      \    'pattern': '^\s*#\s*\%(include\|define\)\>'},
      \   {'filetype': 'go',
      \    'pattern': '^import ('},
      \   {'filetype': 'html',
      \    'pattern': '<\%(!DOCTYPE\|html\|head\|script\|meta\|link|div\|span\)\>\|^html:5\s*$'},
      \   {'filetype': 'xml',
      \    'pattern': '<[0-9a-zA-Z]\+'},
      \ ]
'''

[[plugins]]
repo        = 'beyondmarc/hlsl.vim'
lazy        = 1
on_ft       = 'hlsl'

[[plugins]]
repo        = 'cespare/vim-toml'
lazy        = 1
on_ft       = ['toml', 'markdown']

[[plugins]]
repo        = 'stephpy/vim-yaml'
lazy        = 1
on_ft       = 'yaml'

[[plugins]]
repo        = 'tpope/vim-markdown'
lazy        = 1
on_ft       = 'markdown'
hook_add    = '''
let g:markdown_fenced_languages = [
      \   'c',    'cpp', 'cs', 'go',
      \   'ruby', 'lua', 'python',
      \   'vim',
      \   'toml',
      \   'xml',  'json', 'css'
      \ ]
'''

[[plugins]]
repo        = 'vim-scripts/JSON.vim'
lazy        = 1
on_ft       = ['json', 'markdown']

[[plugins]]
repo        = 'PProvost/vim-ps1'
lazy        = 1
on_ft       = 'ps1'
# }}}
# テキストオブジェクト {{{
# https://github.com/kana/vim-textobj-user/wiki
# http://d.hatena.ne.jp/osyo-manga/20130717/1374069987
[[plugins]]
repo        = 'kana/vim-textobj-user'
lazy        = 1

# #
[[plugins]]
repo        = 'anyakichi/vim-textobj-ifdef'
lazy        = 1
depends     = 'vim-textobj-user'
on_map      = [['xo', 'a#'], ['xo', 'i#']]

# c
[[plugins]]
repo        = 'glts/vim-textobj-comment'
lazy        = 1
depends     = 'vim-textobj-user'
on_map      = [['xo', 'ac'], ['xo', 'ic']]

# .
[[plugins]]
repo        = 'rhysd/textobj-wiw'
lazy        = 1
depends     = 'vim-textobj-user'
on_map      = [['xo', '<Plug>']]
hook_add    = '''
xmap a. <Plug>(textobj-wiw-a)
xmap i. <Plug>(textobj-wiw-i)
omap a. <Plug>(textobj-wiw-a)
omap i. <Plug>(textobj-wiw-i)
'''

# e
[[plugins]]
repo        = 'kana/vim-textobj-entire'
lazy        = 1
depends     = 'vim-textobj-user'
on_map      = [['xo', 'ae'], ['xo', 'ie']]

# i I
[[plugins]]
repo        = 'kana/vim-textobj-indent'
lazy        = 1
depends     = 'vim-textobj-user'
on_map      = [['xo', 'ai'], ['xo', 'aI'], ['xo', 'ii'], ['xo', 'iI'], ['xo', '<Plug>(textobj-indent']]

# l
[[plugins]]
repo        = 'kana/vim-textobj-line'
lazy        = 1
depends     = 'vim-textobj-user'
on_map      = [['xo', 'al'], ['xo', 'il']]

# b
[[plugins]]
repo        = 'rhysd/vim-textobj-anyblock'
lazy        = 1
depends     = 'vim-textobj-user'
on_map      = [['xo', 'ab'], ['xo', 'ib']]

# v V
[[plugins]]
repo        = 'rhysd/vim-textobj-word-column'
lazy        = 1
depends     = 'vim-textobj-user'
on_map      = [['xo', 'av'], ['xo', 'aV'], ['xo', 'iv'], ['xo', 'iV']]

# a
[[plugins]]
repo        = 'sgur/vim-textobj-parameter'
lazy        = 1
depends     = 'vim-textobj-user'
on_map      = [['xo', '<Plug>']]
hook_add    = '''
xmap aa <Plug>(textobj-parameter-a)
xmap ia <Plug>(textobj-parameter-i)
omap aa <Plug>(textobj-parameter-a)
omap ia <Plug>(textobj-parameter-i)
'''

# x
[[plugins]]
repo        = 'whatyouhide/vim-textobj-xmlattr'
lazy        = 1
depends     = 'vim-textobj-user'
on_map      = [['xo', 'ax'], ['xo', 'ix']]

# }}}
# オペレータ {{{
# http://qiita.com/rbtnn/items/a47ed6684f1f0bc52906
[[plugins]]
repo        = 'kana/vim-operator-user'
lazy        = 1

# t
[[plugins]]
repo        = 'YoshihiroIto/vim-operator-tcomment'
lazy        = 1
depends     = ['vim-operator-user', 'tcomment_vim']
on_map      = [['nx', '<Plug>']]
hook_add    = '''
nmap t  <Plug>(operator-tcomment)
xmap t  <Plug>(operator-tcomment)
'''

# R
[[plugins]]
repo        = 'kana/vim-operator-replace'
lazy        = 1
depends     = 'vim-operator-user'
on_map      = [['nx', '<Plug>']]
hook_add    = '''
map R  <Plug>(operator-replace)
'''

# S
[[plugins]]
repo        = 'rhysd/vim-operator-surround'
lazy        = 1
depends     = 'vim-operator-user'
on_map      = [['nx', '<Plug>']]
hook_add    = '''
map  S  <Plug>(operator-surround-append)
nmap Sd <Plug>(operator-surround-delete)ab
nmap Sr <Plug>(operator-surround-replace)ab
let g:operator#surround#blocks = {
      \   '-': [
      \     {
      \       'block':      ["{\<CR>", "\<CR>}"],
      \       'motionwise': ['line'            ],
      \       'keys':       ['{', '}'          ]
      \     }
      \   ]
      \ }
'''

# _
[[plugins]]
repo        = 'tyru/operator-camelize.vim'
lazy        = 1
depends     = 'vim-operator-user'
on_map      = [['nx', '<Plug>']]
hook_add    = '''
nmap <silent> _ <Plug>(operator-camelize-toggle)
xmap <silent> _ <Plug>(operator-camelize-toggle)
'''

# }}}

