# プラグイン {{{
[[plugins]]
repo      = 'Shougo/dein.vim'
lazy      = 0

# }}}
# ライブラリ {{{
[[plugins]]
repo      = 'Shougo/vimproc'
lazy      = 0
hook_add  = '''
let g:vimproc#download_windows_dll = 1
'''

[[plugins]]
repo      = 'xolox/vim-misc'
lazy      = 0

[[plugins]]
repo      = 'xolox/vim-shell'
lazy      = 0

[[plugins]]
repo      = 'Shougo/tabpagebuffer.vim'
lazy      = 1
on_path   = '.*'

[[plugins]]
repo      = 'osyo-manga/shabadou.vim'
lazy      = 1

[[plugins]]
repo      = 'kana/vim-submode'
lazy      = 1
on_map    = ['gh', 'gw', ',w']

# }}}
# 表示 {{{
[[plugins]]
repo      = 'YoshihiroIto/molokai'
lazy      = 0

[[plugins]]
repo      = 'itchyny/lightline.vim'
lazy      = 0

[[plugins]]
repo      = 'LeafCage/foldCC.vim'
lazy      = 1
on_ft     = ['vim', 'xml', 'toml']
hook_add  = '''
let g:foldCCtext_enable_autofdc_adjuster = 1
let g:foldCCtext_tail                    =
      \ 'printf("[ %4d lines  Lv%-2d]", v:foldend - v:foldstart + 1, v:foldlevel)'

set foldtext=FoldCCtext()
'''

[[plugins]]
repo      = 'scrooloose/syntastic'
lazy      = 1
on_ft     = ['go', 'ruby', 'python']

[[plugins]]
repo        = 'itchyny/vim-parenmatch'
lazy        = 1
on_path     = '.*'
hook_source = '''
let g:parenmatch_highlight = 0
highlight ParenMatch guifg=#000000 guibg=#FD971F gui=bold
'''

[[plugins]]
repo      = 'Konfekt/FastFold'
lazy      = 1
on_path   = '.*'

# }}}
# 検索 {{{
[[plugins]]
repo      = 'osyo-manga/vim-anzu'
lazy      = 1
on_map    = '<Plug>'

[[plugins]]
repo      = 'haya14busa/vim-asterisk'
lazy      = 1
on_map    = '<Plug>'

[[plugins]]
repo      = 'k-takata/matchit.vim'
lazy      = 1
on_path   = '.*'
hook_source = '''
silent! execute 'doautocmd Filetype' &filetype
'''

[[plugins]]
repo      = 'haya14busa/incsearch.vim'
lazy      = 1
on_cmd    = 'IncSearchNoreMap'
on_map    = '<Plug>'
hook_source = '''
let g:incsearch#auto_nohlsearch   = 1
let g:incsearch#emacs_like_keymap = 1
let g:incsearch#magic             = '\v'
'''

[[plugins]]
repo      = 'rhysd/clever-f.vim'
lazy      = 1
on_map    = '<Plug>'
hook_add  = '''
nmap f <Plug>(clever-f-f)
xmap f <Plug>(clever-f-f)
omap f <Plug>(clever-f-f)
nmap F <Plug>(clever-f-F)
xmap F <Plug>(clever-f-F)
omap F <Plug>(clever-f-F)
'''
hook_source = '''
let g:clever_f_not_overwrites_standard_mappings = 1
let g:clever_f_ignore_case                      = 1
let g:clever_f_smart_case                       = 1
let g:clever_f_across_no_line                   = 1
let g:clever_f_use_migemo                       = 1
let g:clever_f_chars_match_any_signs            = ';'
let g:clever_f_mark_char_color                  = 'Clever_f_mark_char'

highlight default Clever_f_mark_char ctermfg=Green ctermbg=NONE cterm=underline
      \                              guifg=Green   guibg=NONE   gui=underline
'''

# }}}
# 補完 {{{
[[plugins]]
repo      = 'Shougo/neocomplete.vim'
lazy      = 1
on_i      = 1

[[plugins]]
repo      = 'Shougo/neoinclude.vim'
lazy      = 1
depends   = 'neocomplete.vim'
on_i      = 1

[[plugins]]
repo      = 'Shougo/neosnippet.vim'
lazy      = 1
depends   = 'neocomplete.vim'
on_i      = 1

# }}}
# 移動 {{{
[[plugins]]
repo      = 'deris/parajump'
lazy      = 1
on_map    = '<Plug>'

# }}}
# 編集 {{{
[[plugins]]
repo      = 'tomtom/tcomment_vim'
lazy      = 1
on_func   = 'tcomment'
on_map    = 'gc'
on_cmd    = 'TComment'

[[plugins]]
repo      = 'osyo-manga/vim-over'
lazy      = 1
on_cmd    = 'OverCommandLine'

[[plugins]]
repo      = 'LeafCage/yankround.vim'
lazy      = 1
on_map    = '<Plug>'

[[plugins]]
repo      = 'nishigori/increment-activator'
lazy      = 1
on_map    = ['<C-x>', '<C-a>']
hook_add  = '''
let g:increment_activator_filetype_candidates = {
      \   '_':   [['width', 'height']],
      \   'cs':  [['private', 'protected', 'public', 'internal'],
      \           ['abstract', 'virtual', 'override']],
      \   'cpp': [['private', 'protected', 'public']]
      \ }
'''

[[plugins]]
repo      = 'junegunn/vim-easy-align'
lazy      = 1
on_map    = '<Plug>(EasyAlign)'
hook_add  = '''
nmap <silent> <Leader>a=       v<Plug>(textobj-indent-i)<Plug>(EasyAlign)=
nmap <silent> <Leader>a:       v<Plug>(textobj-indent-i)<Plug>(EasyAlign):
nmap <silent> <Leader>a,       v<Plug>(textobj-indent-i)<Plug>(EasyAlign)*,
nmap <silent> <Leader>a<Space> v<Plug>(textobj-indent-i)<Plug>(EasyAlign)*<Space>
nmap <silent> <Leader>a\|      v<Plug>(textobj-indent-i)<Plug>(EasyAlign)*\|
xmap <silent> <Leader>a=       <Plug>(EasyAlign)=
xmap <silent> <Leader>a:       <Plug>(EasyAlign):
xmap <silent> <Leader>a,       <Plug>(EasyAlign)*,
xmap <silent> <Leader>a<Space> <Plug>(EasyAlign)*<Space>
xmap <silent> <Leader>a\|      <Plug>(EasyAlign)*\|
'''

[[plugins]]
repo      = 'thinca/vim-qfreplace'
lazy      = 1
on_ft     = ['unite', 'quickfix']

[[plugins]]
repo      = 'tpope/vim-endwise'
lazy      = 1
on_ft     = ['vim', 'ruby', 'lua']
hook_add  = '''
" http://cohama.hateblo.jp/entry/20121017/1350482411
let g:endwise_no_mappings = 1
AutocmdFT lua,ruby,vim imap <buffer> <CR> <CR><Plug>DiscretionaryEnd
'''

[[plugins]]
repo      = 'kana/vim-smartinput'
lazy      = 1
on_i      = 1
hook_source = '''
call smartinput#clear_rules()
call smartinput#define_default_rules()
'''

# }}}
# ファイル {{{
[[plugins]]
repo      = 'kana/vim-altr'
lazy      = 1
on_map    = '<Plug>'

[[plugins]]
repo      = 'YoshihiroIto/vim-auto-mirroring'
lazy      = 1
on_path   = '.*'

# }}}
# アプリ {{{
[[plugins]]
repo      = 'YoshihiroIto/vim-icondrag'
lazy      = 1
on_path   = '.*'
hook_source = '''
call icondrag#enable()
'''

[[plugins]]
repo      = 'beckorz/previm'
lazy      = 1
depends   = 'open-browser.vim'
on_ft     = 'markdown'
hook_add  = '''
if has('win32')
  let g:previm_open_cmd = 'C:\\Program\ Files\ (x86)\\Google\\Chrome\\Application\\chrome.exe'
endif
'''

[[plugins]]
repo      = 'tyru/open-browser.vim'
lazy      = 1
on_func   = 'openbrowser'
on_cmd    = 'OpenBrowser'
hook_add  = '''
let g:openbrowser_no_default_menus = 1
'''

[[plugins]]
repo      = 'Shougo/vimfiler.vim'
lazy      = 1
depends   = 'unite.vim'
on_map    = '<Plug>'
on_path   = '.*'
hook_add  = '''
noremap <silent> [App]f :<C-u>VimFilerBufferDir<CR>
'''
hook_source = '''
  AutocmdFT vimfiler nmap     <buffer><expr>   <CR>
        \                         vimfiler#smart_cursor_map('<Plug>(vimfiler_cd_file)',
        \                                                   '<Plug>(vimfiler_edit_file)')
  AutocmdFT vimfiler nmap     <buffer><expr>   <C-j>
        \                         vimfiler#smart_cursor_map('<Plug>(vimfiler_exit)',
        \                                                   '<Plug>(vimfiler_exit)')
  AutocmdFT vimfiler nnoremap <silent><buffer> J :<C-u>Unite bookmark<CR>
  AutocmdFT vimfiler nnoremap <silent><buffer> / :<C-u>Unite file -horizontal<CR>
  AutocmdFT vimfiler nnoremap <silent><buffer> gr
        \                         :<C-u>Unite -no-split -buffer-name=grep grep:.<CR>

  let g:vimfiler_as_default_explorer        = 1
  let g:vimfiler_force_overwrite_statusline = 0
  let g:vimfiler_ignore_pattern             = []
  let g:vimfiler_tree_leaf_icon             = ' '
  let g:vimfiler_readonly_file_icon         = '⭤'
  let g:unite_kind_file_use_trashbox        = 1
'''
hook_post_source = '''
  call vimfiler#custom#profile('default', 'context', {'auto_cd': 1})
'''

[[plugins]]
repo      = 'rhysd/wandbox-vim'
lazy      = 1
hook_source = '''
" wandbox.vim で quickfix を開かないようにする
let g:wandbox#open_quickfix_window = 0
let g:wandbox#default_compiler     = {'cpp': 'clang-head'}
'''

[[plugins]]
repo      = 'Shougo/vimshell.vim'
lazy      = 1
on_cmd    = 'VimShellPop'
hook_add  = '''
noremap <silent> [App]s :<C-u>VimShellPop<CR>

let g:shell_mappings_enabled = 0
let g:vimshell_popup_height   = 40
let g:vimshell_prompt_pattern = '^\%(\f\|\\.\)\+> '
let g:vimshell_prompt_expr    =
      \ 'escape(substitute(fnamemodify(getcwd(), ":~").">", "\\", "/", "g"), "\\[]()?! ")." "'
'''

[[plugins]]
repo      = 'glidenote/memolist.vim'
lazy      = 1
depends   = 'unite.vim'
on_cmd    = ['MemoNew', 'MemoList', 'MemoGrep']
hook_add  = '''
noremap <silent> [App]mn :<C-u>MemoNew<CR>
noremap <silent> [App]ml :<C-u>MemoList<CR>
noremap <silent> [App]mg :<C-u>MemoGrep<CR>

let g:memolist_unite        = 1
let g:memolist_memo_suffix  = 'md'
let g:memolist_unite_source = 'memolist'
" let g:memolist_path         = s:dropbox_dir . '/memo'
let g:memolist_path         = expand('~/Dropbox') . '/memo'
'''

[[plugins]]
repo      = 'thinca/vim-quickrun'
lazy      = 1
depends   = ['shabadou.vim', 'wandbox-vim']
on_map    = '<Plug>'
hook_add  = '''
noremap <silent> [App]r :<C-u>QuickRun<CR>

let g:quickrun_config = {
      \   '_': {
      \     'hook/close_unite_quickfix/enable_hook_loaded': 1,
      \     'hook/unite_quickfix/enable_failure':           1,
      \     'hook/close_quickfix/enable_exit':              1,
      \     'hook/close_buffer/enable_failure':             1,
      \     'hook/close_buffer/enable_empty_data':          1,
      \     'outputter':                                    'multi:buffer:quickfix',
      \     'runner':                                       'vimproc',
      \     'runner/vimproc/updatetime':                    40
      \   },
      \   'cpp/wandbox': {
      \     'runner':                                       'wandbox',
      \     'runner/wandbox/compiler':                      'clang-head',
      \     'runner/wandbox/options':                       'warning,c++1y,boost-1.55'
      \   },
      \   'lua': {
      \     'type':                                         'lua/vim'
      \   }
      \ }
'''

# }}}
# Unite {{{
[[plugins]]
repo      = 'Shougo/unite.vim'
lazy      = 1
depends   = 'neomru.vim'
on_cmd    = ['Unite', 'UniteResume', 'UniteWithCursorWord']
hook_add  = '''
nnoremap [Unite] <Nop>
xnoremap [Unite] <Nop>
nmap     <Space> [Unite]
xmap     <Space> [Unite]

nnoremap <silent> [Unite]cg   :<C-u>Unite -no-split -buffer-name=grep        grep<CR>
nnoremap <silent> [Unite]gg   :<C-u>Unite -no-split -buffer-name=grep        grep:.<CR>
nnoremap <silent> [Unite]ccg  :<C-u>Unite -no-split -buffer-name=grep        grep:..<CR>
nnoremap <silent> [Unite]cccg :<C-u>Unite -no-split -buffer-name=grep        grep:../..<CR>
nnoremap <silent> [Unite]pg   :<C-u>Unite -no-split -buffer-name=grep        grep:!<CR>
nnoremap <silent> [Unite]f    :<C-u>Unite           -buffer-name=buffer      buffer<CR>
nnoremap <silent> [Unite]j    :<C-u>Unite           -buffer-name=bookmark    bookmark<CR>
nnoremap <silent> [Unite]l    :<C-u>Unite -no-split -buffer-name=line        line<CR>
nnoremap <silent> [Unite]o    :<C-u>Unite -vertical -buffer-name=outline     outline<CR>
nnoremap <silent> [Unite]q    :<C-u>Unite -no-quit  -buffer-name=quickfix    quickfix<CR>
nnoremap <silent> [Unite]m    :<C-u>Unite -no-split -buffer-name=neomru/file neomru/file<CR>
nnoremap <silent> [Unite]v    :<C-u>call <SID>execute_if_on_git_branch(
      \                     'Unite -no-split -buffer-name=giti            giti')<CR>
nnoremap <silent> [Unite]b    :<C-u>call <SID>execute_if_on_git_branch(
      \                     'Unite -no-split -buffer-name=giti/branch_all giti/branch_all')<CR>

nnoremap <silent> [Unite]rr   :<C-u>UniteResume<CR>
nnoremap <silent> [Unite]rg   :<C-u>UniteResume grep<CR>
nnoremap <silent> [Unite]rf   :<C-u>UniteResume buffer<CR>
nnoremap <silent> [Unite]rj   :<C-u>UniteResume bookmark<CR>
nnoremap <silent> [Unite]rl   :<C-u>UniteResume line<CR>
nnoremap <silent> [Unite]ro   :<C-u>UniteResume outline<CR>
nnoremap <silent> [Unite]rq   :<C-u>UniteResume quickfix<CR>
nnoremap <silent> [Unite]rm   :<C-u>UniteResume neomru/file<CR>
nnoremap <silent> [Unite]rv   :<C-u>UniteResume giti<CR>
nnoremap <silent> [Unite]rb   :<C-u>UniteResume giti/branch_all<CR>

nnoremap <silent> [Unite]e  :<C-u>Unite -no-split -buffer-name=everything everything<CR>
nnoremap <silent> [Unite]re :<C-u>UniteResume everything<CR>
'''
hook_source = '''
  let g:unite_force_overwrite_statusline = 0
  let g:unite_source_alias_aliases       = {
        \   'memolist': {
        \       'source': 'file'
        \   },
        \   'var': {
        \       'source': 'output',
        \       'args':   'let'
        \   },
        \   'message': {
        \       'source': 'output',
        \       'args':   'message'
        \   }
        \ }

  if executable('jvgrep')
    let g:unite_source_grep_command       = 'jvgrep'
    let g:unite_source_grep_default_opts  =
          \ '-8 -r -i -I ' .
          \ '--exclude ''\.(git|svn|vs|o|a|exe|dll|pdb|nupkg)$|(\bobj\b|\bbin\b)'' '
    let g:unite_source_grep_recursive_opt = '-R'
    let g:unite_source_grep_encoding      = 'utf-8'
  endif

  call unite#custom#profile('default', 'context', {
        \   'direction':        'rightbelow',
        \   'hide_icon':        0,
        \   'ignorecase':       1,
        \   'prompt':           '>>',
        \   'prompt_direction': 'top',
        \   'smartcase':        1,
        \   'start_insert':     1,
        \   'vertical':         0,
        \   'winwidth':         60
        \ })

  call unite#custom_default_action('source/bookmark/directory', 'vimfiler')
  call unite#custom_default_action('directory',                 'vimfiler')
  call unite#custom_default_action('neomru/directory',          'vimfiler')

  call unite#custom#source('memolist',        'sorters',        ['sorter_ftime', 'sorter_reverse'])
  call unite#custom#source('everything',      'max_candidates', 500)
  call unite#custom#source('grep',            'max_candidates', 0)
  call unite#custom#source('line',            'max_candidates', 0)
  call unite#custom#source('giti/branch_all', 'max_candidates', 0)

  AutocmdFT unite nnoremap <silent><buffer><expr> <C-r> unite#do_action('replace')
  AutocmdFT unite inoremap <silent><buffer><expr> <C-r> unite#do_action('replace')
  AutocmdFT unite nmap     <silent><buffer>       <C-v> <Plug>(unite_toggle_auto_preview)
  AutocmdFT unite imap     <silent><buffer>       <C-v> <Plug>(unite_toggle_auto_preview)
  AutocmdFT unite nmap     <silent><buffer>       <C-j> <Plug>(unite_exit)
'''

[[plugins]]
repo      = 'Shougo/neomru.vim'
lazy      = 1
on_path   = '.*'
hook_source = '''
let g:neomru#update_interval         = 1
let g:neomru#file_mru_ignore_pattern = 'fugitiveblame'
'''

[[plugins]]
repo      = 'Shougo/unite-outline'
lazy      = 1
on_source = 'unite.vim'

[[plugins]]
repo      = 'osyo-manga/unite-quickfix'
lazy      = 1
on_source = 'unite.vim'

[[plugins]]
repo      = 'YoshihiroIto/vim-unite-giti'
lazy      = 1
on_source = 'unite.vim'
on_cmd    = 'GitiFetch'

[[plugins]]
repo      = 'tsukkee/unite-tag'
lazy      = 1
on_source = 'unite.vim'

[[plugins]]
repo      = 'sgur/unite-everything'
lazy      = 1
on_source = 'unite.vim'
hook_add  = '''
let g:unite_source_everything_full_path_search = 1
'''

# }}}
# C# {{{
[[plugins]]
repo      = 'OmniSharp/omnisharp-vim'
lazy      = 1
on_ft     = 'cs'
hook_source = '''
let g:omnicomplete_fetch_full_documentation = 1
let g:Omnisharp_stop_server                 = 0
let g:OmniSharp_typeLookupInPreview         = 0

AutocmdFT cs setlocal omnifunc=OmniSharp#Complete
AutocmdFT cs nnoremap <silent><buffer> <C-]> :<C-u>call OmniSharp#GotoDefinition()<CR>
      \                                      zz
      \                                      :call <SID>refresh_screen()<CR>
'''

# }}}
# C++ {{{
[[plugins]]
repo      = 'Mizuchi/STL-Syntax'
lazy      = 1
on_ft     = 'cpp'

[[plugins]]
repo      = 'vim-jp/vim-cpp'
lazy      = 1
on_ft     = 'cpp'

[[plugins]]
repo      = 'rhysd/vim-clang-format'
lazy      = 1
on_cmd    = 'ClangFormat'
hook_source = '''
let g:clang_format#style_options = {
      \   'AccessModifierOffset':                           -4,
      \   'AllowShortIfStatementsOnASingleLine':            'false',
      \   'AlwaysBreakBeforeMultilineStrings':              'false',
      \   'BreakBeforeBraces':                              'Allman',
      \   'BreakConstructorInitializersBeforeComma':        'true',
      \   'ColumnLimit':                                    0,
      \   'ConstructorInitializerAllOnOneLineOrOnePerLine': 'false',
      \   'IndentCaseLabels':                               'true',
      \   'IndentWidth':                                    4,
      \   'UseTab':                                         'Never'
      \ }
'''

# }}}
# Go {{{
[[plugins]]
repo      = 'fatih/vim-go'
lazy      = 1
on_ft     = 'go'

# }}}
# Xml {{{
[[plugins]]
repo      = 'YoshihiroIto/vim-closetag'
lazy      = 1
on_func   = 'closetag'
hook_add  = '''
let g:closetag_filenames = '*.{html,xhtml,xml,xaml}'
'''

# }}}
# TypeScript {{{
[[plugins]]
repo      = 'clausreinke/typescript-tools.vim'
lazy      = 1
on_ft     = 'typescript'

# }}}
# Git {{{
[[plugins]]
repo      = 'tpope/vim-fugitive'
lazy      = 0

[[plugins]]
repo      = 'airblade/vim-gitgutter'
lazy      = 0
hook_add  = '''
let g:gitgutter_map_keys           = 0
let g:gitgutter_eager              = 0
let g:gitgutter_diff_args          = ''
let g:gitgutter_sign_column_always = 1

Autocmd FocusGained,FocusLost * GitGutter
'''

[[plugins]]
repo      = 'cohama/agit.vim'
lazy      = 1
on_cmd    = ['Agit', 'AgitFile']
hook_add  = '''
if has('win32')
  let g:agit_enable_auto_show_commit = 0
endif
'''

# }}}
# ファイルタイプ {{{
[[plugins]]
repo      = 'itchyny/vim-autoft'
lazy      = 0
hook_add  = '''
let g:autoft_config = [
      \   {'filetype': 'cs',
      \    'pattern': '^\s*using'},
      \   {'filetype': 'cpp',
      \    'pattern': '^\s*#\s*\%(include\|define\)\>'},
      \   {'filetype': 'go',
      \    'pattern': '^import ('},
      \   {'filetype': 'html',
      \    'pattern': '<\%(!DOCTYPE\|html\|head\|script\|meta\|link|div\|span\)\>\|^html:5\s*$'},
      \   {'filetype': 'xml',
      \    'pattern': '<[0-9a-zA-Z]\+'},
      \ ]
'''

[[plugins]]
repo      = 'beyondmarc/hlsl.vim'
lazy      = 1
on_ft     = 'hlsl'

[[plugins]]
repo      = 'cespare/vim-toml'
lazy      = 1
on_ft     = ['toml', 'markdown']

[[plugins]]
repo      = 'jelera/vim-javascript-syntax'
lazy      = 1
on_ft     = 'javascript'

[[plugins]]
repo      = 'stephpy/vim-yaml'
lazy      = 1
on_ft     = 'yaml'

[[plugins]]
repo      = 'tikhomirov/vim-glsl'
lazy      = 1
on_ft     = 'glsl'

[[plugins]]
repo      = 'tpope/vim-markdown'
lazy      = 1
on_ft     = 'markdown'
hook_add  = '''
let g:markdown_fenced_languages = [
      \   'c',    'cpp', 'cs', 'go',
      \   'ruby', 'lua', 'python',
      \   'vim',
      \   'toml',
      \   'xml',  'json'
      \ ]
'''

[[plugins]]
repo      = 'vim-ruby/vim-ruby'
lazy      = 1
on_ft     = 'ruby'

[[plugins]]
repo      = 'vim-scripts/JSON.vim'
lazy      = 1
on_ft     = ['json', 'markdown']

[[plugins]]
repo      = 'leafgarland/typescript-vim'
lazy      = 1
on_ft     = 'typescript'

[[plugins]]
repo      = 'PProvost/vim-ps1'
lazy      = 1
on_ft     = 'ps1'
# }}}
# テキストオブジェクト {{{
# https://github.com/kana/vim-textobj-user/wiki
# http://d.hatena.ne.jp/osyo-manga/20130717/1374069987
[[plugins]]
repo      = 'kana/vim-textobj-user'
lazy      = 1

# #
[[plugins]]
repo      = 'anyakichi/vim-textobj-ifdef'
lazy      = 1
depends   = 'vim-textobj-user'
on_map    = [['xo', 'a#'], ['xo', 'i#']]

# c
[[plugins]]
repo      = 'glts/vim-textobj-comment'
lazy      = 1
depends   = 'vim-textobj-user'
on_map    = [['xo', 'ac'], ['xo', 'ic']]

# .
[[plugins]]
repo      = 'rhysd/textobj-wiw'
lazy      = 1
depends   = 'vim-textobj-user'
on_map    = [['xo', '<Plug>']]
hook_add  = '''
xmap a. <Plug>(textobj-wiw-a)
xmap i. <Plug>(textobj-wiw-i)
omap a. <Plug>(textobj-wiw-a)
omap i. <Plug>(textobj-wiw-i)
'''

# e
[[plugins]]
repo      = 'kana/vim-textobj-entire'
lazy      = 1
depends   = 'vim-textobj-user'
on_map    = [['xo', 'ae'], ['xo', 'ie']]

# i I
[[plugins]]
repo      = 'kana/vim-textobj-indent'
lazy      = 1
depends   = 'vim-textobj-user'
on_map    = [['xo', 'ai'], ['xo', 'aI'], ['xo', 'ii'], ['xo', 'iI'], ['xo', '<Plug>(textobj-indent']]

# l
[[plugins]]
repo      = 'kana/vim-textobj-line'
lazy      = 1
depends   = 'vim-textobj-user'
on_map    = [['xo', 'al'], ['xo', 'il']]

# b
[[plugins]]
repo      = 'rhysd/vim-textobj-anyblock'
lazy      = 1
depends   = 'vim-textobj-user'
on_map    = [['xo', 'ab'], ['xo', 'ib']]

# v V
[[plugins]]
repo      = 'rhysd/vim-textobj-word-column'
lazy      = 1
depends   = 'vim-textobj-user'
on_map    = [['xo', 'av'], ['xo', 'aV'], ['xo', 'iv'], ['xo', 'iV']]

# a
[[plugins]]
repo      = 'sgur/vim-textobj-parameter'
lazy      = 1
depends   = 'vim-textobj-user'
on_map    = [['xo', '<Plug>']]
hook_add  = '''
xmap aa <Plug>(textobj-parameter-a)
xmap ia <Plug>(textobj-parameter-i)
omap aa <Plug>(textobj-parameter-a)
omap ia <Plug>(textobj-parameter-i)
'''

# f{char}
[[plugins]]
repo      = 'thinca/vim-textobj-between'
lazy      = 1
depends   = 'vim-textobj-user'
on_map    = [['xo', 'af'], ['xo', 'if']]

# x
[[plugins]]
repo      = 'whatyouhide/vim-textobj-xmlattr'
lazy      = 1
depends   = 'vim-textobj-user'
on_map    = [['xo', 'ax'], ['xo', 'ix']]

# }}}
# オペレータ {{{
# http://qiita.com/rbtnn/items/a47ed6684f1f0bc52906
[[plugins]]
repo      = 'kana/vim-operator-user'
lazy      = 1

# t
[[plugins]]
repo      = 'YoshihiroIto/vim-operator-tcomment'
lazy      = 1
depends   = ['vim-operator-user', 'tcomment_vim']
on_map    = [['nx', '<Plug>']]
hook_add  = '''
nmap t  <Plug>(operator-tcomment)
xmap t  <Plug>(operator-tcomment)
'''

# <Leader>r
[[plugins]]
repo      = 'deris/vim-rengbang'
lazy      = 1
depends   = 'vim-operator-user'
on_map    = [['nx', '<Plug>(operator-rengbang']]
on_cmd    = 'RengBang'

# R
[[plugins]]
repo      = 'kana/vim-operator-replace'
lazy      = 1
depends   = 'vim-operator-user'
on_map    = [['nx', '<Plug>']]
hook_add  = '''
nmap R  <Plug>(operator-replace)
xmap R  <Plug>(operator-replace)
'''

# S
[[plugins]]
repo      = 'rhysd/vim-operator-surround'
lazy      = 1
depends   = 'vim-operator-user'
on_map    = [['nx', '<Plug>']]
hook_add  = '''
map  S  <Plug>(operator-surround-append)
nmap Sd <Plug>(operator-surround-delete)ab
nmap Sr <Plug>(operator-surround-replace)ab
let g:operator#surround#blocks = {
      \   '-': [
      \     {
      \       'block':      ["{\<CR>", "\<CR>}"],
      \       'motionwise': ['line'            ],
      \       'keys':       ['{', '}'          ]
      \     }
      \   ]
      \ }
'''

# _
[[plugins]]
repo      = 'tyru/operator-camelize.vim'
lazy      = 1
depends   = 'vim-operator-user'
on_map    = [['nx', '<Plug>']]
hook_add  = '''
nmap _  <Plug>(operator-camelize-toggle)
xmap _  <Plug>(operator-camelize-toggle)
'''

# <Leader>j
[[plugins]]
repo      = 'osyo-manga/vim-operator-jump_side'
lazy      = 1
depends   = 'vim-operator-user'
on_map    = [['nx', '<Plug>(operator-jump']]

# }}}
